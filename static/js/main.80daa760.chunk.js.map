{"version":3,"sources":["AppContext.js","SpotifyCredientials.js","Login/Login.js","Home/FunctionButton.js","Home/useDailyDrive.js","Home/combineDailyMixes.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","APP_STATE_VALUES","ACCESS_TOKEN","key","type","ME","AppProvider","children","clearPersistedState","localStorage","clear","Provider","value","getPersistedState","state","item","getItem","JSON","parse","setPersistedState","setValue","setItem","stringify","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","DAILY_MIX_IDS","Login","useContext","useState","gettingToken","setGettingToken","redirect","setRedirect","useEffect","_token","access_token","to","className","Spinner","animation","role","href","join","onClick","Button","variant","FunctionButton","isLoading","loadingText","defaultText","error","disabled","style","marginTop","color","message","removePodcastsFromDD","accessToken","setDailyDriveState","dailyDriveState","localMe","a","spotifyApiInstance","axios","create","baseURL","headers","Authorization","addItemsToPlaylist","existingPlaylistId","trackUris","post","uris","replaceItemsInPlaylist","put","get","dailyDriveTrackList","data","tracks","items","length","forEach","playlistItem","name","id","acc","trackItem","idx","track","artists","push","uri","public","collaborative","didLoad","combineDailyMixes","setDailyMixesState","dailyMixesState","position","pushTracks","allTracks","Promise","resolve","sliceAllTracks","start","end","slice","uploadMaxTracks","i","playlistId","reject","first","allTrackUris","uploadTrackList","returnId","dailyMixId","dailyMixTrackList","Math","ceil","Home","shouldReroute","setShouldReroute","dailyMixState","setDailyMixState","setLocalMe","getMe","persistedMe","padding","minHeight","display","flexDirection","justifyContent","alignItems","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"4RAEaA,EAAaC,wBAAc,IAE3BC,EAAmB,CAC9BC,aAAc,CACZC,IAAK,cACLC,KAAM,UAERC,GAAI,CACFF,IAAK,KACLC,KAAM,WAIGE,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAuBtBC,EAAsB,kBAAMC,aAAaC,SAE/C,OACE,kBAACX,EAAWY,SAAZ,CAAqBC,MAAO,CAC1BX,mBACAY,kBAnBsB,SAACC,GACzB,IACE,GAAmB,WAAfA,EAAMV,KAAmB,CAC3B,IAAMW,EAAON,aAAaO,QAAQF,EAAMX,KACxC,OAAIY,EAAaE,KAAKC,MAAMH,GACrB,KAEP,OAAON,aAAaO,QAAQF,EAAMX,KAEpC,SACAK,MAUAW,kBA5BsB,SAACL,EAAOM,GACb,WAAfN,EAAMV,KACRK,aAAaY,QAAQP,EAAMX,IAAKc,KAAKK,UAAUF,IAE/CX,aAAaY,QAAQP,EAAMX,IAAKiB,IAyBhCZ,wBAECD,I,uBC3CDgB,EAAS,CAAC,oBAAqB,kBAAmB,8BAA+B,yBAA0B,wBAAyB,2BAGpIC,EAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAAUC,EAASf,GACzB,GAAIA,EAAM,CACR,IAAIgB,EAAQhB,EAAKa,MAAM,KACvBE,EAAQC,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOD,IACN,IAcQG,EAAgB,CAPT,yBACA,yBACA,yBACA,yBACA,yBACA,0BCiBLC,EAnCD,WAAO,IAAD,EACgDC,qBAAWpC,GAAjDG,EADV,EACVD,iBAAoBC,aAAgBiB,EAD1B,EAC0BA,kBAD1B,EAEsBiB,oBAAS,GAF/B,mBAEXC,EAFW,KAEGC,EAFH,OAGcF,oBAAS,GAHvB,mBAGXG,EAHW,KAGDC,EAHC,KAalB,OARAC,qBAAU,WACR,IAAMC,EAASlB,EAAKmB,aAChBD,IACFvB,EAAkBjB,EAAcwC,GAChCF,GAAY,MAEb,CAACrB,EAAmBjB,IAEnBqC,EAAiB,kBAAC,IAAD,CAAUK,GAAG,UAEhC,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACdR,EAYE,kBAACS,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,WAXnC,uBACEH,UAAU,yBACVI,KAAI,UAtBa,yCAsBb,sBD7BC,mCC6BD,yBD9BoF,mDC8BpF,kBAA8E1B,EAAO2B,KACvF,OADE,yCAGJC,QAAS,kBAAMb,GAAgB,KAE/B,kBAACc,EAAA,EAAD,CAAQC,QAAQ,WAAhB,wB,wCCbGC,EAnBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWJ,EAAd,EAAcA,QAASK,EAAvB,EAAuBA,YAAaC,EAApC,EAAoCA,YAAaC,EAAjD,EAAiDA,MAAjD,OACrB,6BACE,kBAACN,EAAA,EAAD,CACEC,QAAQ,UACRF,QAASI,EAAY,KAAOJ,EAC5BQ,SAAUJ,GAETA,EAAYC,EAAcC,GAE5BC,GACC,yBACEE,MAAO,CAAEC,UAAW,EAAGC,MAAO,QAE7BJ,EAAMK,SAAWL,K,QCZbM,EAAoB,uCAAG,WAAOC,EAAaC,EAAoBC,EAAiBC,GAAzD,6BAAAC,EAAA,sEAE1BC,EAAqBC,IAAMC,OAAO,CACtCC,QAAS,6BACTC,QAAS,CAAEC,cAAc,UAAD,OAAYV,MAGhCW,EAP0B,+BAAAP,EAAA,MAOL,WAAOQ,EAAoBC,GAA3B,SAAAT,EAAA,sEACnBC,EAAmBS,KAAnB,qBAAsCF,EAAtC,WAAmE,CACvEG,KAAMF,IAFiB,2CAPK,wDAa1BG,EAb0B,+BAAAZ,EAAA,MAaD,WAAOQ,EAAoBC,GAA3B,SAAAT,EAAA,sEAEvBC,EAAmBY,IAAnB,qBAAqCL,EAArC,WAAkE,CACtEG,KAAMF,IAHqB,2CAbC,wDAoBhCZ,EAAmB,eAAKC,EAAN,CAAuBZ,WAAW,EAAMG,MAAO,QApBjC,SAuBEY,EAAmBa,IAAnB,qBHTV,2BGdQ,aAuB1BC,EAvB0B,QAyBVC,MACpBD,EAAoBC,KAAKC,QACzBF,EAAoBC,KAAKC,OAAOC,OAChCH,EAAoBC,KAAKC,OAAOC,MAAMC,OAAS,GAC/CpB,GA7B8B,kCAgCNE,EAAmBa,IAAI,iBAhCjB,kBAmCpBE,KAAKE,MAAME,SAAQ,SAACC,GHpBD,8BGqBvBA,EAAaC,OAAqCd,EAAqBa,EAAaE,OAGpFd,EAAYM,EAAoBC,KAAKC,OAAOC,MAAM1D,QAAO,SAACgE,EAAKC,EAAWC,GAE9E,OADIA,EAAM,GAA8B,UAAzBD,EAAUE,MAAM5F,MAAwD,YAApC0F,EAAUE,MAAMC,QAAQ,GAAGN,MAAoBE,EAAIK,KAAKJ,EAAUE,MAAMG,KACpHN,IACN,KAEChB,EA5C0B,kCA8CtBI,EAAuBJ,EAAoBC,GA9CrB,iDAiDLR,EAAmBS,KAAnB,iBAAkCX,EAAQwB,GAA1C,cAA0D,CAC/ED,KHnCyB,4BGoCzBS,QAAQ,EACRC,eAAe,IApDW,wBAiDpBhB,EAjDoB,EAiDpBA,KAjDoB,UAsDtBT,EAAmBS,EAAKO,GAAId,GAtDN,QAwD9BZ,EAAmB,eAAKC,EAAN,CAAuBZ,WAAW,KAxDtB,0DA6DhCW,EAAmB,CAAEX,WAAW,EAAO+C,SAAS,EAAM5C,MAAK,OA7D3B,0DAAH,4D,QCEpB6C,EAAiB,uCAAG,WAAOtC,EAAauC,EAAoBC,EAAiBrC,GAAzD,uCAAAC,EAAA,+DAEvBC,EAAqBC,IAAMC,OAAO,CACtCC,QAAS,6BACTC,QAAS,CAAEC,cAAc,UAAD,OAAYV,MAGhCW,EAPuB,+BAAAP,EAAA,MAOF,WAAOQ,EAAoBC,GAA3B,2BAAAT,EAAA,6DAAsCqC,EAAtC,+BAAiD,EAAjD,SACnBpC,EAAmBS,KAAnB,qBAAsCF,EAAtC,WAAmE,CACvEG,KAAMF,EACN4B,aAHuB,2CAPE,wDAcvBzB,EAduB,+BAAAZ,EAAA,MAcE,WAAOQ,EAAoBC,GAA3B,SAAAT,EAAA,sEACvBC,EAAmBY,IAAnB,qBAAqCL,EAArC,WAAkE,CACtEG,KAAMF,IAFqB,2CAdF,wDAoBvB6B,EAAa,SAACpB,EAAOqB,GACzB,OAAO,IAAIC,SAAQ,SAACC,GAClBvB,EAAME,SAAQ,SAACK,GAAD,OAAec,EAAUV,KAAKJ,EAAUE,MAAMG,QAC5DW,QAIEC,EAAiB,SAACH,EAAWI,EAAOC,GACxC,OAAO,IAAIJ,SAAQ,SAACC,GAElBA,EADuBF,EAAUM,MAAMF,EAAOC,QAK5CE,EAAkB,SAACC,EAAGC,GAC1B,OAAO,IAAIR,QAAJ,uCAAY,WAAOC,EAASQ,GAAhB,yBAAAjD,EAAA,6DAEX2C,GADAO,EAAc,IAANH,GACQ,EAvCD,IAuC4BA,EAFhC,SAGaL,EAAeS,EAAcR,EAAOA,EAxC7C,KAqCJ,UAGXS,EAHW,OAKbC,EAAWL,EACL,IAAND,GAAYC,EANC,iCAQQ/C,EAAmBS,KAAnB,iBAAkCX,EAAQwB,GAA1C,cAA0D,CAC/ED,KJ7BqB,yBI8BrBS,QAAQ,EACRC,eAAe,IAXF,uBAQPhB,EARO,EAQPA,KAMRqC,EAAWrC,EAAKO,GAdD,UAeThB,EAAmBS,EAAKO,GAAI6B,GAfnB,oCAkBXF,EAlBW,kCAkBEtC,EAAuBoC,EAAYI,GAlBrC,iDAmBJ7C,EAAmByC,EAAYI,EAxDvB,IAwD+DL,GAnBnE,QAqBjBN,EAAQY,GArBS,4CAAZ,0DAyBTlB,EAAmB,eAAKC,EAAN,CAAuBlD,WAAW,EAAMG,MAAO,QAE3D8D,EAAe,GA9DQ,cA+DJvF,GA/DI,kEA+DlB0F,EA/DkB,kBAgEKrD,EAAmBa,IAAnB,qBAAqCwC,IAhE1C,cAgErBC,EAhEqB,QAkEPvC,MAClBuC,EAAkBvC,KAAKC,QACvBsC,EAAkBvC,KAAKC,OAAOC,OAC9BqC,EAAkBvC,KAAKC,OAAOC,MAAMC,OAAS,GAC7CpB,GAtEyB,kCAwEnBuC,EAAWiB,EAAkBvC,KAAKC,OAAOC,MAAOiC,GAxE7B,kKA6ELlD,EAAmBa,IAAI,iBA7ElB,eAgFnBE,KAAKE,MAAME,SAAQ,SAACC,GJjED,2BIkEvBA,EAAaC,OAAmCd,EAAqBa,EAAaE,OAG/EwB,EAAI,EApFgB,aAoFbA,EAAIS,KAAKC,KAAKN,EAAahC,OAtFlB,MAEI,kCAqFA2B,EAAgBC,EAAGvC,GArFnB,QAqF3BA,EArF2B,eAoF8CuC,IApF9C,wBAwF7BZ,EAAmB,eAAKC,EAAN,CAAuBlD,WAAW,KAxFvB,kDA4Ff,wCAAV,MACJiD,EAAmB,CAAEjD,WAAW,EAAO+C,SAAS,EAAM5C,MAAK,OA7F9B,wEAAH,4DC0EfqE,EAtEF,WAAO,IAAD,EAC6F5F,qBAAWpC,GADxG,IACTE,iBAAoBC,EADX,EACWA,aAAcG,EADzB,EACyBA,GAAMQ,EAD/B,EAC+BA,kBAAmBM,EADlD,EACkDA,kBAAmBX,EADrE,EACqEA,oBADrE,EAEyB4B,oBAAS,GAFlC,mBAEV4F,EAFU,KAEKC,EAFL,OAG6B7F,mBAAS,CAAEmB,WAAW,EAAO+C,SAAS,EAAO5C,MAAO,OAHjF,mBAGVS,EAHU,KAGOD,EAHP,OAIyB9B,mBAAS,CAAEmB,WAAW,EAAO+C,SAAS,EAAO5C,MAAO,OAJ7E,mBAIVwE,EAJU,KAIKC,EAJL,OAKa/F,mBAAS,MALtB,mBAKVgC,EALU,KAKDgE,EALC,KAMXnE,EAAcpD,EAAkBX,GAsBtC,OApBAuC,qBAAU,WACR,IAAM4F,EAAK,uCAAG,8BAAAhE,EAAA,+EAEaE,IAAMY,IAAI,gCAAiC,CAChET,QAAS,CACPC,cAAc,UAAD,OAAYV,MAJnB,gBAEFoB,EAFE,EAEFA,KAKRlE,EAAkBd,EAAIgF,GACtB+C,EAAW/C,GARD,gDAUV4C,GAAiB,GAVP,yDAAH,qDAcLK,EAAczH,EAAkBR,GACjCiI,EACAF,EAAWE,GADED,MAEjB,CAAChI,EAAI4D,EAAapD,EAAmBM,KAEnC8C,GAAe+D,EAAsB,kBAAC,IAAD,CAAUpF,GAAG,WAGrD,yBAAKgB,MAAO,CACV2E,QAAS,OACTC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,WAAY,WAEXxE,GACC,oCACE,kBAAC,EAAD,CACEb,UAAWY,EAAgBZ,UAC3BJ,QAAS,kBAAMa,EAAqBC,EAAaC,EAAoBC,EAAiBC,IACtFZ,YAAY,cACZC,YAAY,mCACZC,MAAOS,EAAgBT,QAEzB,kBAAC,EAAD,CACEH,UAAW2E,EAAc3E,UACzBJ,QAAS,kBAAMoD,EAAkBtC,EAAakE,EAAkBD,EAAe9D,IAC/EZ,YAAY,eACZC,YAAY,0BACZC,MAAOwE,EAAcxE,SAK3B,6BACE,kBAACN,EAAA,EAAD,CAAQC,QAAQ,SAASF,QAAS,WAC9B3C,IACAyH,GAAiB,KAFrB,aCzCOY,G,MApBH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,IAAD,CAAUlG,GAAG,iBCRLmG,QACW,cAA7BtH,OAAOC,SAASsH,UAEe,UAA7BvH,OAAOC,SAASsH,UAEhBvH,OAAOC,SAASsH,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACLoG,QAAQpG,MAAMA,EAAMK,c","file":"static/js/main.80daa760.chunk.js","sourcesContent":["import React, { createContext } from 'react'\n\nexport const AppContext = createContext({})\n\nexport const APP_STATE_VALUES = {\n  ACCESS_TOKEN: {\n    key: 'accessToken',\n    type: 'string',\n  },\n  ME: {\n    key: 'me',\n    type: 'object',\n  },\n}\n\nexport const AppProvider = ({ children }) => {\n  const setPersistedState = (state, setValue) => {\n    if (state.type === 'object') {\n      localStorage.setItem(state.key, JSON.stringify(setValue))  \n    } else {\n      localStorage.setItem(state.key, setValue)\n    }\n  }\n\n  const getPersistedState = (state) => {\n    try {\n      if (state.type === 'object') {\n        const item = localStorage.getItem(state.key)\n        if (item) return JSON.parse(item)\n        return null\n      } else {\n        return localStorage.getItem(state.key)\n      }\n    } catch {\n      clearPersistedState()\n    }\n  }\n\n  const clearPersistedState = () => localStorage.clear()\n\n  return (\n    <AppContext.Provider value={{\n      APP_STATE_VALUES,\n      getPersistedState,\n      setPersistedState,\n      clearPersistedState,\n    }}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n","const redirectUri = process.env.REACT_APP_STAGE === 'dev' ? 'http://localhost:3000/react-spotify' : 'https://matthewfbenjamin.github.io/react-spotify' // https://serverless-stack.com/chapters/environments-in-create-react-app.html\nconst clientId = '7719deb8aec14035bd2d6d603b240f78'\nconst clientSecret = '6773e4e378fa4a1b87e3e8c4f8c85da4'\n\nconst scopes = ['user-read-private', 'user-read-email', 'playlist-read-collaborative', 'playlist-modify-public', 'playlist-read-private', 'playlist-modify-private']\n\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function (initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {})\n\nconst YOUR_DAILY_DRIVE_ID = '37i9dQZF1EfMJO4KCTeoFL'\nconst DAILY_DRIVE_OVERWRITE_NAME = 'Daily Drive (No Podcasts)'\n\nconst DAILY_MIX_OVERWRITE_NAME = 'Daily Mixes (Combined)'\n\nconst DAILY_MIX_1 = '37i9dQZF1E396S6lMfWgMr'\nconst DAILY_MIX_2 = '37i9dQZF1E37668qIGJAPy'\nconst DAILY_MIX_3 = '37i9dQZF1E38kE5eusdyAj'\nconst DAILY_MIX_4 = '37i9dQZF1E39PcKoUK0RQ5'\nconst DAILY_MIX_5 = '37i9dQZF1E38F06FDwNi27'\nconst DAILY_MIX_6 = '37i9dQZF1E38FbWIM4PDxJ'\n\nexport const DAILY_MIX_IDS = [\n  DAILY_MIX_1,\n  DAILY_MIX_2,\n  DAILY_MIX_3,\n  DAILY_MIX_4,\n  DAILY_MIX_5,\n  DAILY_MIX_6,\n]\n\nexport {\n  redirectUri,\n  clientId,\n  clientSecret,\n  scopes,\n  hash,\n  YOUR_DAILY_DRIVE_ID,\n  DAILY_DRIVE_OVERWRITE_NAME,\n  DAILY_MIX_OVERWRITE_NAME,\n}","import React, { useState, useEffect, useContext } from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Button from 'react-bootstrap/Button'\nimport { Redirect } from 'react-router-dom'\n\nimport { AppContext } from '../AppContext'\nimport { clientId, redirectUri, scopes, hash } from '../SpotifyCredientials'\n\nexport const AUTH_ENDPOINT = 'https://accounts.spotify.com/authorize'\n\nconst Login = () => {\n  const { APP_STATE_VALUES: { ACCESS_TOKEN }, setPersistedState } = useContext(AppContext)\n  const [gettingToken, setGettingToken] = useState(false)\n  const [redirect, setRedirect] = useState(false)\n  \n  useEffect(() => {\n    const _token = hash.access_token\n    if (_token) {\n      setPersistedState(ACCESS_TOKEN, _token)\n      setRedirect(true)\n    }\n  }, [setPersistedState, ACCESS_TOKEN])\n\n  if (redirect) return <Redirect to=\"/home\" />\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!gettingToken ? (\n          <a\n            className=\"btn btn--loginApp-link\"\n            href={`${AUTH_ENDPOINT}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              \"%20\"\n            )}&response_type=token&show_dialog=true`}\n            onClick={() => setGettingToken(true)}\n          >\n            <Button variant=\"success\">\n              Login to Spotify\n            </Button>\n          </a>\n        ) : <Spinner animation=\"border\" role=\"status\" />}\n      </header>\n    </div>\n  )\n}\n\nexport default Login","import React from 'react'\nimport Button from 'react-bootstrap/Button'\n\nconst FunctionButton = ({ isLoading, onClick, loadingText, defaultText, error }) => (\n  <div>\n    <Button\n      variant=\"success\"\n      onClick={isLoading ? null : onClick}\n      disabled={isLoading}\n    >\n      {isLoading ? loadingText : defaultText}\n    </Button>\n    {error &&\n      <div\n        style={{ marginTop: 8, color: 'red' }}\n      >\n        {error.message || error}\n      </div>\n    }\n  </div>\n)\n\nexport default FunctionButton","import axios from 'axios'\n\nimport { YOUR_DAILY_DRIVE_ID, DAILY_DRIVE_OVERWRITE_NAME } from '../SpotifyCredientials'\n\nexport const removePodcastsFromDD = async (accessToken, setDailyDriveState, dailyDriveState, localMe) => {\n  try {\n    const spotifyApiInstance = axios.create({\n      baseURL: 'https://api.spotify.com/v1',\n      headers: { Authorization: `Bearer ${accessToken}` }\n    });\n\n    const addItemsToPlaylist = async (existingPlaylistId, trackUris) => {\n      await spotifyApiInstance.post(`/playlists/${existingPlaylistId}/tracks`, {\n        uris: trackUris,\n      })\n    }\n\n    const replaceItemsInPlaylist = async (existingPlaylistId, trackUris) => {\n      debugger\n      await spotifyApiInstance.put(`/playlists/${existingPlaylistId}/tracks`, {\n        uris: trackUris,\n      })\n    }\n\n    setDailyDriveState({ ...dailyDriveState, isLoading: true, error: null })\n    // GET THE USER'S DAILY DRIVE (Only works for me, now)\n    // TODO: Update for everyone\n    const dailyDriveTrackList = await spotifyApiInstance.get(`/playlists/${YOUR_DAILY_DRIVE_ID}`)\n    if (\n      dailyDriveTrackList.data &&\n      dailyDriveTrackList.data.tracks &&\n      dailyDriveTrackList.data.tracks.items &&\n      dailyDriveTrackList.data.tracks.items.length > 0 &&\n      localMe\n    ) {\n      // Get all the playlists and see if the DAILY_DRIVE_OVERWRITE_NAME exists already\n      const playlists = await spotifyApiInstance.get('/me/playlists')\n\n      let existingPlaylistId\n      playlists.data.items.forEach((playlistItem) => {\n        if (playlistItem.name === DAILY_DRIVE_OVERWRITE_NAME) existingPlaylistId = playlistItem.id\n      })\n\n      const trackUris = dailyDriveTrackList.data.tracks.items.reduce((acc, trackItem, idx) => {\n        if (idx > 0 && trackItem.track.type === 'track' && trackItem.track.artists[0].name !== 'Spotify') acc.push(trackItem.track.uri)\n        return acc\n      }, [])\n\n      if (existingPlaylistId) {\n        // Replace items in the current playlist with the trackUris\n        await replaceItemsInPlaylist(existingPlaylistId, trackUris)\n      } else {\n        // Create a new playlist and add the track URI's\n        const { data } = await spotifyApiInstance.post(`/users/${localMe.id}/playlists`, {\n          name: DAILY_DRIVE_OVERWRITE_NAME,\n          public: false,\n          collaborative: false,\n        })\n        await addItemsToPlaylist(data.id, trackUris)\n      }\n      setDailyDriveState({ ...dailyDriveState, isLoading: false })\n    }\n  } catch (error) {\n    // TODO: Signout if access token no longer valid\n    // if (badAccessToken) setShouldReroute(true)\n    setDailyDriveState({ isLoading: false, didLoad: true, error })\n  }\n}","import axios from 'axios'\n\nimport { DAILY_MIX_IDS, DAILY_MIX_OVERWRITE_NAME } from '../SpotifyCredientials'\n\nconst PLAYLIST_TRACK_LIMIT = 100\n\nexport const combineDailyMixes = async (accessToken, setDailyMixesState, dailyMixesState, localMe) => {\n  try {\n    const spotifyApiInstance = axios.create({\n      baseURL: 'https://api.spotify.com/v1',\n      headers: { Authorization: `Bearer ${accessToken}` }\n    });\n\n    const addItemsToPlaylist = async (existingPlaylistId, trackUris, position = 0) => {\n      await spotifyApiInstance.post(`/playlists/${existingPlaylistId}/tracks`, {\n        uris: trackUris,\n        position,\n      })\n    }\n\n    const replaceItemsInPlaylist = async (existingPlaylistId, trackUris) => {\n      await spotifyApiInstance.put(`/playlists/${existingPlaylistId}/tracks`, {\n        uris: trackUris,\n      })\n    }\n\n    const pushTracks = (items, allTracks) => {\n      return new Promise((resolve) => {\n        items.forEach((trackItem) => allTracks.push(trackItem.track.uri))\n        resolve()\n      })\n    }\n\n    const sliceAllTracks = (allTracks, start, end) => {\n      return new Promise((resolve) => {\n        const tracksToUpload = allTracks.slice(start, end)\n        resolve(tracksToUpload)\n      })\n    }\n\n    const uploadMaxTracks = (i, playlistId) => {\n      return new Promise(async (resolve, reject) => {\n        const first = i === 0\n        const start = first ? 0 : PLAYLIST_TRACK_LIMIT * i\n        const uploadTrackList = await sliceAllTracks(allTrackUris, start, start + PLAYLIST_TRACK_LIMIT)\n\n        let returnId = playlistId\n        if (i === 0 && !playlistId) {\n          // Create a new playlist and add the track URI's\n          const { data } = await spotifyApiInstance.post(`/users/${localMe.id}/playlists`, {\n            name: DAILY_MIX_OVERWRITE_NAME,\n            public: false,\n            collaborative: false,\n          })\n          \n          returnId = data.id\n          await addItemsToPlaylist(data.id, uploadTrackList)\n        } else {\n          // Replace items in the current playlist with the trackUris\n          if (first) await replaceItemsInPlaylist(playlistId, uploadTrackList)\n          else await addItemsToPlaylist(playlistId, uploadTrackList, PLAYLIST_TRACK_LIMIT * i)\n        }\n        resolve(returnId)\n      })\n    }\n\n    setDailyMixesState({ ...dailyMixesState, isLoading: true, error: null })\n\n    const allTrackUris = []\n    for (const dailyMixId of DAILY_MIX_IDS) {\n      const dailyMixTrackList = await spotifyApiInstance.get(`/playlists/${dailyMixId}`)\n      if (\n        dailyMixTrackList.data &&\n        dailyMixTrackList.data.tracks &&\n        dailyMixTrackList.data.tracks.items &&\n        dailyMixTrackList.data.tracks.items.length > 0 &&\n        localMe\n      ) {\n        await pushTracks(dailyMixTrackList.data.tracks.items, allTrackUris)\n      }\n    }\n    \n    // Get all the playlists and see if the DAILY_MIX_OVERWRITE_NAME exists already\n    const playlists = await spotifyApiInstance.get('/me/playlists')\n\n    let existingPlaylistId\n    playlists.data.items.forEach((playlistItem) => {\n      if (playlistItem.name === DAILY_MIX_OVERWRITE_NAME) existingPlaylistId = playlistItem.id\n    })\n\n    for (let i = 0; i < Math.ceil(allTrackUris.length / PLAYLIST_TRACK_LIMIT); i++) {\n      existingPlaylistId = await uploadMaxTracks(i, existingPlaylistId)\n    }\n\n    setDailyMixesState({ ...dailyMixesState, isLoading: false })\n  } catch (error) {\n    // TODO: Signout if access token no longer valid\n    // if (badAccessToken) setShouldReroute(true)\n    if (error === 'Request failed with status code 401') \n    setDailyMixesState({ isLoading: false, didLoad: true, error })\n  }\n}","import React, { useContext, useEffect, useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport axios from 'axios'\nimport Button from 'react-bootstrap/Button'\n\nimport FunctionButton from './FunctionButton'\nimport { AppContext } from '../AppContext'\nimport { removePodcastsFromDD } from './useDailyDrive'\nimport { combineDailyMixes } from './combineDailyMixes'\n\nconst Home = () => {\n  const { APP_STATE_VALUES: { ACCESS_TOKEN, ME }, getPersistedState, setPersistedState, clearPersistedState } = useContext(AppContext)\n  const [shouldReroute, setShouldReroute] = useState(false)\n  const [dailyDriveState, setDailyDriveState] = useState({ isLoading: false, didLoad: false, error: null })\n  const [dailyMixState, setDailyMixState] = useState({ isLoading: false, didLoad: false, error: null })\n  const [localMe, setLocalMe] = useState(null)\n  const accessToken = getPersistedState(ACCESS_TOKEN)\n\n  useEffect(() => {\n    const getMe = async () => {\n      try {\n        const { data } = await axios.get('https://api.spotify.com/v1/me', {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        })\n        setPersistedState(ME, data)\n        setLocalMe(data)\n      } catch (error) {\n        setShouldReroute(true)\n      }\n    }\n\n    const persistedMe = getPersistedState(ME)\n    if (!persistedMe) getMe()\n    else setLocalMe(persistedMe)\n  }, [ME, accessToken, getPersistedState, setPersistedState])\n\n  if (!accessToken || shouldReroute) return <Redirect to=\"/login\" />\n\n  return (\n    <div style={{\n      padding: '30px',\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }}>\n      {localMe && (\n        <>\n          <FunctionButton\n            isLoading={dailyDriveState.isLoading}\n            onClick={() => removePodcastsFromDD(accessToken, setDailyDriveState, dailyDriveState, localMe)}\n            loadingText=\"Removing...\"\n            defaultText=\"Remove Podcasts from Daily Drive\"\n            error={dailyDriveState.error}\n          />\n          <FunctionButton\n            isLoading={dailyMixState.isLoading}\n            onClick={() => combineDailyMixes(accessToken, setDailyMixState, dailyMixState, localMe)}\n            loadingText=\"Combining...\"\n            defaultText=\"Combine all Daily Mixes\"\n            error={dailyMixState.error}\n          />\n        </>\n      )\n      }\n      <div>\n        <Button variant=\"danger\" onClick={() => {\n            clearPersistedState()\n            setShouldReroute(true)\n          }}>\n          Logout\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\n\nimport { AppProvider } from './AppContext'\nimport { Login } from './Login'\nimport { Home } from './Home'\nimport './App.css'\n\nconst App = () => {\n  return (\n    <AppProvider>\n      <HashRouter>\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/login\" />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </AppProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}